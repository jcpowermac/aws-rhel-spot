---
# tasks file for aws_instance
#

- name: Create instance specific EC2 key
  local_action:
    module: ec2_key
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_key }}"
    name: "{{ keyname }}"
    region: "{{ ec2_region }}"
  register: keypair

- name: Save private key locally
  copy:
    dest: "{{ keypairs_path }}/aws-{{ keypair.key.name }}-private.pem"
    content: "{{ keypair.key.private_key }}"
    mode: 0600
  when: keypair.changed
  register: keypair_file

#- name: Archive private key to master S3 bucket
#  local_action:
#    module: s3
#    aws_access_key: "{{ ec2_access_key }}"
#    aws_secret_key: "{{ ec2_secret_key }}"
#    bucket: "{{ s3_bucket_key }}"
#    object: "/aws-{{ keypair.key.name }}-private.pem"
#    src: "{{ keypair_file.dest }}"
#    encrypt: yes
#    overwrite: no
#    mode: put
#
- name: Find Available EC2 AMIs
  local_action:
    module: ec2_ami_find
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_key }}"
    name: "{{ ami_name }}"
    region: "{{ ec2_region }}"
    owner: '{{ ami_owner | default("") }}'
    virtualization_type: hvm
  register: ec2_ami

- name: Create EC2 Security Group
  local_action:
    module: ec2_group
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_key }}"
    name: "{{ sg_name }}"
    description: "{{ sg_description }}"
    region: "{{ ec2_region }}"
    vpc_id: "{{ vpc_id }}" # NOTE
    rules: "{{ aws_sg_rules }}"
    rules_egress: "{{ aws_sg_egress_rules }}"
  register: sg


# Provisioning EC2 Instance
# -------------------------
# image parameter details:
# We retrieve the AMIs using `ec2_ami_find` and register `ec2_ami`.  Using the results array
# we sort on `creationDate` select only the `ami_id` and grab the first entry of the array.
# This will provide us with the `ami_id` of the latest release of the requested AMI.

  #- name: Provision EC2 Instance
  #  local_action:
  #    module: ec2
  #    aws_access_key: "{{ ec2_access_key }}"
  #    aws_secret_key: "{{ ec2_secret_key }}"
  #    key_name: "{{ keypair.key.name }}"
  #    group_id: "{{ sg.group_id }}"
  #    instance_type: "{{ ec2_instance_type }}"
  #    image: "{{ ec2_ami.results|sort(attribute='creationDate', reverse=True) | map(attribute='ami_id') | first()}}"
  #    vpc_subnet_id: "{{ vpc_subnet_id }}"
  #    region: "{{ ec2_region }}"
  #    instance_tags: "{{ instance_tags }}"
  #    exact_count: "{{ exact_count }}"
  #    count_tag:
  #      Type: "{{ ec2_tag_type }}"
  #    assign_public_ip: yes
  #    user_data: "{{ lookup('template', 'templates/cloud-init.yml.j2') }}"
  #    wait: true
  #    ebs_optimized: false
  #    volumes: "{{ ec2_volumes }}"
  #  register: ec2

- name: Provision EC2 Spot Instance
  local_action:
    module: ec2
    spot_price: "{{ spot_price }}"
    spot_type: "{{ spot_type | default('one-time') }}"
    spot_wait_timeout: 1200
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_key }}"
    key_name: "{{ keypair.key.name }}"
    group_id: "{{ sg.group_id }}"
    instance_type: "{{ ec2_instance_type }}"
    image: "{{ ec2_ami.results|sort(attribute='creationDate', reverse=True) | map(attribute='ami_id') | first()}}"
    vpc_subnet_id: "{{ vpc_subnet_id }}"
    region: "{{ ec2_region }}"
    instance_tags: "{{ instance_tags }}"
    exact_count: "{{ exact_count }}"
    count_tag:
      Type: "{{ ec2_tag_type }}"
    assign_public_ip: yes
    user_data: "{{ lookup('template', 'templates/cloud-init.yml.j2') }}"
    wait: true
    ebs_optimized: false
    volumes: "{{ ec2_volumes }}"
  register: ec2

  #- name: Create Volume
  #  local_action:
  #    module: ec2_vol
  #    aws_access_key: "{{ ec2_access_key }}"
  #    aws_secret_key: "{{ ec2_secret_key }}"
  #    region: "{{ ec2_region }}"
  #    instance: "{{ item[0].id }}"
  #    device_name: "{{ item[1].device_name }}"
  #    volume_size: "{{ item[1].volume_size }}"
  #    volume_type: "{{ item[1].volume_type }}"
  #  with_nested:
  #    - "{{ ec2.tagged_instances | default([]) }}"
  #    - "{{ ec2_volumes }}"
  #  register: ec2_vol
  #
- name: Allocate Elastic IP and Associate with instance
  local_action:
    module: ec2_eip
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_key }}"
    device_id: "{{ item.id }}"
    region: "{{ ec2_region }}"
    in_vpc: yes
    reuse_existing_ip_allowed: yes
    state: present
  with_items: "{{ ec2.tagged_instances | default([]) }}"
  register: eip

- name: Set Facts - Linux
  set_fact:
    ansible_become: True
    ansible_become_user: root
    ansible_become_method: sudo
    ansible_ssh_private_key_file: "{{ keypairs_path }}/aws-{{ keypair.key.name }}-private.pem"
  when: "'Windows' not in ami_name"

- name: Set Facts - Windows
  set_fact:
    ansible_ssh_pass: "{{ aws_ansible_ssh_pass }}"
  when: "'Windows' in ami_name"

- name: Set Facts - Global
  set_fact:
    ansible_host: "{{ item.public_ip }}"
    ansible_port: "{{ aws_ansible_ssh_port }}"
    ansible_user: "{{ aws_ansible_ssh_user }}"
    ansible_connection: "{{ aws_ansible_connection }}"
  with_items: "{{ eip.results | default([]) }}"

- name: Wait for {{ ansible_connection }} to be available
  local_action:
    module: wait_for
    host: "{{ ansible_host }}"
    state: started
    port: "{{ ansible_port }}"
    delay: 30
    connect_timeout: 15
    timeout: 300
